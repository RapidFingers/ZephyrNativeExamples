// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Type extends haxe.lang.HxObject
{
	public Type(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Type()
	{
		//line 39 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		haxe.root.Type.__hx_ctor__Type(this);
	}
	
	
	public static void __hx_ctor__Type(haxe.root.Type __hx_this)
	{
	}
	
	
	public static java.lang.Class getEnum(java.lang.Object o)
	{
		//line 51 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (( ( o instanceof java.lang.Enum ) || ( o instanceof haxe.lang.Enum ) )) 
		{
			//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return o.getClass();
		}
		
		//line 54 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return null;
	}
	
	
	public static java.lang.String getClassName(java.lang.Class c)
	{
		//line 68 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.Class c1 = ((java.lang.Class) (c) );
		//line 69 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.String name = c1.getName();
		//line 70 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (name.startsWith("haxe.root.")) 
		{
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 72 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (name.startsWith("java.lang")) 
		{
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			name = haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		{
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.String __temp_svar1 = (name);
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			boolean __temp_executeDef2 = true;
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			switch (__temp_hash3)
			{
				case -1325958191:
				case 2052876273:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (( (( ( __temp_hash3 == -1325958191 ) && __temp_svar1.equals("double") )) || __temp_svar1.equals("Double") )) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 78 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Float";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
				case -1939501217:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (__temp_svar1.equals("Object")) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 79 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Dynamic";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
				case 104431:
				case -672261858:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (( (( ( __temp_hash3 == 104431 ) && __temp_svar1.equals("int") )) || __temp_svar1.equals("Integer") )) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 77 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Int";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
			}
			
			//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (__temp_executeDef2) 
			{
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return name;
			}
			else
			{
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.Class resolveClass(java.lang.String name)
	{
		//line 97 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 98 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( haxe.lang.StringExt.indexOf(name, ".", null) == -1 )) 
			{
				//line 99 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				name = ( "haxe.root." + name );
			}
			
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ((java.lang.Class) (java.lang.Class.forName(haxe.lang.Runtime.toString(name))) );
		}
		catch (java.lang.ClassNotFoundException e)
		{
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			haxe.lang.Exceptions.setException(e);
			//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			{
				//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				java.lang.String __temp_svar1 = (name);
				//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				boolean __temp_executeDef2 = true;
				//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				switch (__temp_svar1.hashCode())
				{
					case 360541844:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Class")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.Class.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1242153355:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.String")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 106 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.String.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -140489125:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Dynamic")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 109 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.Object.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 704654956:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Math")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.Math.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 363325304:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Float")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 105 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return double.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1778387957:
					{
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Int")) 
						{
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 104 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return int.class;
						}
						
						//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
				}
				
				//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				if (__temp_executeDef2) 
				{
					//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					return null;
				}
				else
				{
					//line 110 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					throw null;
				}
				
			}
			
		}
		
		
	}
	
	
	public static <T> T createInstance(java.lang.Class cl, haxe.root.Array args)
	{
		
			int len = args.length;
			java.lang.Class[] cls = new java.lang.Class[len];
			java.lang.Object[] objs = new java.lang.Object[len];

			java.lang.reflect.Constructor[] ms = cl.getConstructors();
			int msl = ms.length;
			int realMsl = 0;
			for(int i =0; i < msl; i++)
			{
				if (!ms[i].isVarArgs() && ms[i].getParameterTypes().length != len)
				{
					ms[i] = null;
				} else {
					ms[realMsl] = ms[i];
					if (realMsl != i)
						ms[i] = null;
					realMsl++;
				}
			}

			boolean hasNumber = false;

			for (int i = 0; i < len; i++)
			{
				Object o = args.__get(i);
				objs[i]= o;
				cls[i] = o.getClass();
				boolean isNum = false;

				if (o instanceof java.lang.Number)
				{
					cls[i] = java.lang.Number.class;
					isNum = hasNumber = true;
				}

				msl = realMsl;
				realMsl = 0;

				for (int j = 0; j < msl; j++)
				{
					java.lang.Class[] allcls = ms[j].getParameterTypes();
					if (i < allcls.length)
					{
						if (! ((isNum && allcls[i].isPrimitive()) || allcls[i].isAssignableFrom(cls[i])) )
						{
							ms[j] = null;
						} else {
							ms[realMsl] = ms[j];
							if (realMsl != j)
								ms[j] = null;
							realMsl++;
						}
					}
				}

			}

			java.lang.reflect.Constructor found = ms[0];

			if (hasNumber)
			{
				java.lang.Class[] allcls = found.getParameterTypes();

				for (int i = 0; i < len; i++)
				{
					java.lang.Object o = objs[i];
					if (o instanceof java.lang.Number)
					{
						java.lang.Class curCls = null;
						if (i < allcls.length)
						{
							curCls = allcls[i];
							if (!curCls.isAssignableFrom(o.getClass()))
							{
								String name = curCls.getName();
								if (name.equals("double") || name.equals("java.lang.Double"))
								{
									objs[i] = ((java.lang.Number)o).doubleValue();
								} else if (name.equals("int") || name.equals("java.lang.Integer"))
								{
									objs[i] = ((java.lang.Number)o).intValue();
								} else if (name.equals("float") || name.equals("java.lang.Float"))
								{
									objs[i] = ((java.lang.Number)o).floatValue();
								} else if (name.equals("byte") || name.equals("java.lang.Byte"))
								{
									objs[i] = ((java.lang.Number)o).byteValue();
								} else if (name.equals("short") || name.equals("java.lang.Short"))
								{
									objs[i] = ((java.lang.Number)o).shortValue();
								}
							}
						} //else varargs not handled TODO
					}
				}
			}

		try {
			found.setAccessible(true);
			return (T) found.newInstance(objs);
		}
		catch (java.lang.reflect.InvocationTargetException e)
		{
			throw haxe.lang.HaxeException.wrap(e.getCause());
		}

		catch (Throwable t)
		{
			throw haxe.lang.HaxeException.wrap(t);
		}
	
	}
	
	
	protected static final java.lang.Class[] __createEmptyInstance_EMPTY_TYPES = ((java.lang.Class[]) (new java.lang.Class[]{((java.lang.Class) (((java.lang.Class) (haxe.lang.EmptyObject.class) )) )}) );
	
	protected static final haxe.lang.EmptyObject[] __createEmptyInstance_EMPTY_ARGS = ((haxe.lang.EmptyObject[]) (new haxe.lang.EmptyObject[]{((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) )}) );
	
	public static <T> T createEmptyInstance(java.lang.Class cl)
	{
		//line 250 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 251 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.Class t = ((java.lang.Class) (((java.lang.Class) (cl) )) );
			//line 252 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			try 
			{
				//line 253 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				java.lang.reflect.Constructor<T> ctor = ((java.lang.reflect.Constructor<T>) (((java.lang.reflect.Constructor) (t.getConstructor(((java.lang.Class[]) (haxe.root.Type.__createEmptyInstance_EMPTY_TYPES) ))) )) );
				//line 254 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return ctor.newInstance(((java.lang.Object[]) (haxe.root.Type.__createEmptyInstance_EMPTY_ARGS) ));
			}
			catch (java.lang.NoSuchMethodException _1)
			{
				//line 256 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				haxe.lang.Exceptions.setException(_1);
				//line 256 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return ((T) (t.newInstance()) );
			}
			
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 250 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			throw haxe.lang.HaxeException.wrap(typedException);
		}
		
		
	}
	
	
	public static haxe.root.Array<java.lang.String> getClassFields(java.lang.Class c)
	{
		
		Array<String> ret = new Array<String>();
		if (c == java.lang.String.class)
		{
			ret.push("fromCharCode");
			return ret;
		}

		for (java.lang.reflect.Field f : c.getDeclaredFields())
		{
			java.lang.String fname = f.getName();
			if (java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith("__hx_"))
			ret.push(fname);
		}

		for (java.lang.reflect.Method m : c.getDeclaredMethods())
		{
			if (m.getDeclaringClass() == java.lang.Object.class)
				continue;
			java.lang.String mname = m.getName();
			if (java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith("__hx_"))
				ret.push(mname);
		}

		return ret;
	
	}
	
	
	public static <T> boolean enumEq(T a, T b)
	{
		
			if (a instanceof haxe.lang.Enum)
				return a.equals(b);
			else
				return haxe.lang.Runtime.eq(a, b);
	
	}
	
	
}


